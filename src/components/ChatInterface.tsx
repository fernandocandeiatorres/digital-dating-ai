import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { MessageBubble } from "@/components/MessageBubble";
import { PhotoAttachment } from "@/components/PhotoAttachment";
import { Heart, Send, Sparkles, ArrowLeft, LogOut, User } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "../contexts/AuthContext";

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
  photo?: File;
}

interface ChatInterfaceProps {
  onBackToHome: () => void;
}

export const ChatInterface = ({ onBackToHome }: ChatInterfaceProps) => {
  const { user, signOut } = useAuth();
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      text: "Ol√°! üëã Sou seu coach de relacionamentos com IA. Precisa de ajuda com frases de abertura, manter conversas interessantes, ou quer algumas dicas de carisma? Tamb√©m posso analisar fotos para dar conselhos sobre seu perfil! Estou aqui para ajudar! Qual √© sua situa√ß√£o amorosa?",
      isUser: false,
      timestamp: new Date(),
    },
  ]);
  const [inputValue, setInputValue] = useState("");
  const [selectedPhoto, setSelectedPhoto] = useState<File | null>(null);
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const generateAIResponse = (
    userMessage: string,
    hasPhoto: boolean
  ): string => {
    const lowerMessage = userMessage.toLowerCase();

    if (hasPhoto) {
      return "√ìtima foto! üì∏ Com base na imagem, posso te dar algumas dicas:\n\n‚ú® Sua express√£o est√° natural - isso √© perfeito!\n‚ú® O √¢ngulo da foto valoriza bem seu rosto\n‚ú® Para o perfil, consider adicionar mais uma foto sorrindo\n‚ú® Boa ilumina√ß√£o sempre ajuda a destacar seus melhores tra√ßos\n\nQuer que eu analise mais alguma coisa espec√≠fica sobre a foto ou tem alguma d√∫vida sobre como usar ela no seu perfil?";
    }

    if (
      lowerMessage.includes("abertura") ||
      lowerMessage.includes("primeira mensagem") ||
      lowerMessage.includes("come√ßar")
    ) {
      return "√ìtima pergunta! Aqui est√£o algumas frases de abertura infal√≠veis:\n\nüí´ 'Reparei [algo do perfil dela] - me conta mais sobre isso!'\nüí´ 'Sua [foto espec√≠fica/interesse] chamou minha aten√ß√£o. Qual √© a hist√≥ria por tr√°s?'\nüí´ 'Preciso perguntar - [pergunta genu√≠na sobre os interesses dela]'\n\nO segredo √© ser genu√≠no e mostrar que voc√™ realmente olhou o perfil! Que tipo de vibe voc√™ quer passar?";
    }

    if (
      lowerMessage.includes("carisma") ||
      lowerMessage.includes("charme") ||
      lowerMessage.includes("rizz")
    ) {
      return "Vamos elevar seu carisma! üî•\n\n‚ú® Seja confiante, mas n√£o arrogante\n‚ú® Fa√ßa perguntas envolventes que mostrem interesse genu√≠no\n‚ú® Use humor que combine com a energia dela\n‚ú® Elogie algo espec√≠fico, n√£o apenas 'voc√™ √© linda'\n‚ú® Mostre sua personalidade - seja autenticamente voc√™!\n\nLembre-se: O melhor carisma √© demonstrar interesse genu√≠no em conhec√™-la. Como √© sua personalidade natural?";
    }

    if (
      lowerMessage.includes("conversa") ||
      lowerMessage.includes("papo") ||
      lowerMessage.includes("manter") ||
      lowerMessage.includes("continuar")
    ) {
      return "Manter conversas fluindo √© uma arte! üé®\n\nüåü Fa√ßa perguntas abertas (evite sim/n√£o)\nüåü Compartilhe hist√≥rias, n√£o apenas fatos\nüåü Encontre interesses em comum e aprofunde\nüåü Use a t√©cnica do 'gancho' - aproveite detalhes que ela menciona\nüåü Seja vulner√°vel e aut√™ntico\n\nExemplo: Em vez de 'Como foi seu dia?' tente 'Qual foi o momento mais legal do seu dia?'\n\nCom que tipo de conversa voc√™ costuma ter dificuldade?";
    }

    if (
      lowerMessage.includes("ajuda") ||
      lowerMessage.includes("conselho") ||
      lowerMessage.includes("dica")
    ) {
      return "Estou aqui para ajudar! üíï Posso te auxiliar com:\n\nüí¨ Cria√ß√£o de mensagens perfeitas\nüéØ T√≥picos e iniciadores de conversa\n‚ú® Desenvolvimento de confian√ßa e charme\nüí° Interpreta√ß√£o de sinais e pistas\nüî• Cria√ß√£o do seu estilo √∫nico de relacionamento\nüì∏ An√°lise de fotos para perfis\n\nS√≥ me conte qual situa√ß√£o espec√≠fica voc√™ est√° enfrentando, e eu te darei conselhos personalizados!";
    }

    // Respostas padr√£o para conselhos gerais de relacionamento
    const responses = [
      "Essa √© uma √≥tima pergunta! A chave para o sucesso nos relacionamentos √© autenticidade misturada com confian√ßa. Me conte mais sobre sua situa√ß√£o espec√≠fica para eu poder dar conselhos direcionados! üí™",
      "Adorei que voc√™ est√° sendo proativo com sua vida amorosa! üåü As melhores conex√µes acontecem quando voc√™ √© genu√≠no. Qual √© seu maior desafio no momento?",
      "Cada situa√ß√£o de relacionamento √© √∫nica! üí´ Para te dar os melhores conselhos, voc√™ poderia compartilhar mais detalhes sobre o que est√° vivenciando?",
      "Relacionamentos podem ser complicados, mas voc√™ consegue! üî• Me diga em qual √°rea espec√≠fica voc√™ gostaria de trabalhar e eu vou te ajudar a melhorar seu jogo!",
    ];

    return responses[Math.floor(Math.random() * responses.length)];
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim() && !selectedPhoto) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue || "üì∏ Foto anexada para an√°lise",
      isUser: true,
      timestamp: new Date(),
      photo: selectedPhoto || undefined,
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputValue("");
    const hasPhoto = !!selectedPhoto;
    setSelectedPhoto(null);
    setIsTyping(true);

    // Simulate AI thinking time
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: generateAIResponse(inputValue, hasPhoto),
        isUser: false,
        timestamp: new Date(),
      };

      setMessages((prev) => [...prev, aiResponse]);
      setIsTyping(false);
    }, 1000 + Math.random() * 2000);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handlePhotoSelect = (file: File) => {
    setSelectedPhoto(file);
    toast({
      title: "Foto anexada!",
      description:
        "Sua foto foi anexada com sucesso. Envie sua mensagem para que eu possa analis√°-la.",
    });
  };

  const handlePhotoRemove = () => {
    setSelectedPhoto(null);
  };

  return (
    <div className="max-w-6xl mx-auto flex flex-col min-h-[85vh]">
      <Card className="flex-1 flex flex-col border-2 border-gradient-to-r from-red-500/30 via-pink-500/30 to-red-500/30 bg-gradient-to-br from-gray-800/80 via-gray-900/80 to-gray-800/80 backdrop-blur-xl shadow-2xl">
        <CardHeader className="bg-gradient-to-r from-red-600 via-pink-600 to-red-500 text-white rounded-t-xl relative overflow-hidden flex-shrink-0">
          <div className="absolute inset-0 bg-gradient-to-r from-white/10 via-white/5 to-white/10 animate-pulse"></div>
          <CardTitle className="flex items-center justify-between relative z-10">
            <div className="flex items-center space-x-3">
              <div className="relative">
                <Heart className="w-6 h-6 md:w-7 md:h-7" />
                <Sparkles className="w-3 h-3 md:w-4 md:h-4 absolute -top-1 -right-1 text-yellow-300 animate-pulse" />
              </div>
              <span className="text-lg md:text-xl font-bold">
                Chat do Coach de Relacionamentos
              </span>
            </div>

            {/* Back button */}
            <Button
              onClick={onBackToHome}
              variant="ghost"
              size="sm"
              className="text-white hover:bg-white/20 transition-all duration-300 flex items-center space-x-2 rounded-lg"
            >
              <ArrowLeft className="w-4 h-4" />
              <span className="hidden sm:inline">Voltar</span>
            </Button>
          </CardTitle>
        </CardHeader>

        <CardContent className="flex-1 flex flex-col p-0 min-h-0 overflow-hidden">
          <div
            className="flex-1 overflow-y-auto p-4 md:p-6 space-y-4 md:space-y-6 bg-gradient-to-b from-gray-900/50 via-gray-800/30 to-gray-900/50 custom-scrollbar"
            style={{
              minHeight: "400px",
              maxHeight: messages.length > 10 ? "none" : "60vh",
            }}
          >
            {messages.map((message) => (
              <MessageBubble key={message.id} message={message} />
            ))}

            {isTyping && (
              <div className="flex items-center space-x-3 text-gray-400 animate-fade-in">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gradient-to-r from-red-400 to-pink-400 rounded-full animate-bounce"></div>
                  <div
                    className="w-2 h-2 bg-gradient-to-r from-red-400 to-pink-400 rounded-full animate-bounce"
                    style={{ animationDelay: "0.1s" }}
                  ></div>
                  <div
                    className="w-2 h-2 bg-gradient-to-r from-red-400 to-pink-400 rounded-full animate-bounce"
                    style={{ animationDelay: "0.2s" }}
                  ></div>
                </div>
                <span className="text-sm">Seu coach est√° digitando...</span>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>

          <div className="border-t border-gray-700/50 p-4 md:p-6 bg-gradient-to-r from-gray-800/80 via-gray-900/80 to-gray-800/80 backdrop-blur-sm flex-shrink-0">
            {selectedPhoto && (
              <div className="mb-4 animate-fade-in">
                <PhotoAttachment
                  onPhotoSelect={handlePhotoSelect}
                  onPhotoRemove={handlePhotoRemove}
                  selectedPhoto={selectedPhoto}
                />
              </div>
            )}

            <div className="flex space-x-2 md:space-x-3 items-end">
              <div className="flex-shrink-0">
                <PhotoAttachment
                  onPhotoSelect={handlePhotoSelect}
                  onPhotoRemove={handlePhotoRemove}
                  selectedPhoto={null}
                />
              </div>

              <div className="flex-1 min-w-0">
                <Input
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Pe√ßa conselhos de relacionamento, ajuda com mensagens, dicas de carisma ou anexe uma foto para an√°lise..."
                  className="border-gray-600/50 bg-gray-700/50 text-gray-100 placeholder-gray-400 focus:border-red-400/50 focus:ring-red-400/20 rounded-xl text-sm md:text-base py-3 px-4 transition-all duration-300 w-full"
                  disabled={isTyping}
                />
              </div>

              <div className="flex-shrink-0">
                <Button
                  onClick={handleSendMessage}
                  disabled={(!inputValue.trim() && !selectedPhoto) || isTyping}
                  className="bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700 disabled:from-gray-600 disabled:to-gray-700 text-white rounded-xl px-4 md:px-6 py-3 transition-all duration-300 transform hover:scale-105 shadow-lg disabled:transform-none disabled:shadow-none"
                >
                  <Send className="w-4 h-4 md:w-5 md:h-5" />
                </Button>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
